"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = __importDefault(require("dotenv"));
const openai_1 = require("openai");
const playwright_1 = require("playwright");
dotenv_1.default.config();
// D√©sactiver la v√©rification du certificat SSL (√† utiliser uniquement en d√©veloppement)
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
const room = "jack-hawk-trunk"; // Nom de la salle de jeu
// Initialiser l'API OpenAI
const openai = new openai_1.OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});
// Fonction pour filtrer les cartes vides et √©liminer les doublons
function cleanCards(cards) {
    return Array.from(new Set(cards.filter(card => card.trim() !== ""))); // Filtrer les vides et √©liminer les doublons
}
// Fonction pour g√©n√©rer un indice bas√© sur les cartes de l'√©quipe en utilisant OpenAI
function generateClue(teamCards, enemyCards, neutralCards, blackCard) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log("\x1b[36mD√©but de la g√©n√©ration de l'indice...");
        const prompt = `
    Vous jouez au jeu Codenames. Vous jouez en tant qu'espion dans l'√©quipe rouge.
    Votre but est de g√©n√©rer un indice pour faire deviner les mots de votre √©quipe.
    Vous devez faire deviner un maximum de mots de votre √©quipe sans toucher aux mots de l'√©quipe bleue, les cartes neutres ou la carte noire.
    Surtout la carte noire.
    Il faut donc √©viter les mots tr√®s g√©n√©riques ou les mots qui pourraient √™tre associ√©s √† l'√©quipe bleue ou la carte noire.
    Mais il faut √™tre assez pr√©cis ou m√™me assez subtil pour que votre √©quipe puisse deviner les mots.
    Voici les cartes sur le plateau:
    Cartes de l'√©quipe rouge restante: ${teamCards.join(', ')}
    Cartes de l'√©quipe bleue restante: ${enemyCards.join(', ')}
    Cartes neutres restante: ${neutralCards.join(', ')}
    Carte noire: ${blackCard}.
    J'attends un seul indice, ne proposez pas plusieurs solutions, faites comme si c'√©tait vous qui jouiez.
    R√©pondez-moi seulement avec l'indice et le nombre de mots √† faire deviner ainsi que les mots que vous pensez faire deviner entre parenth√®ses.
    Comme ceci par exemple : "MOT_INDICE NOMBRE_DE_MOTS_EN_CHIFFRE (MOT_A_FAIRE_DEVINER_1, MOT_A_FAIRE_DEVINER_2, MOT_A_FAIRE_DEVINER_3)".

    Exemples d'indices pertinents :
    - Pour les mots "COW-BOY" et "TAMBOUR", un indice pertinent pourrait √™tre "FAR-WEST 2 (COW-BOY, TAMBOUR)".
    - Pour les mots "ROULETTE" et "CASINO", un indice pertinent pourrait √™tre "JEUX 2 (ROULETTE, CASINO)".

    Exemples d'indices non pertinents :
    - Pour les mots "COW-BOY" et "TAMBOUR", un indice non pertinent serait "RHYTHME 2 (COW-BOY, TAMBOUR)" car "RHYTHME" n'est pas directement li√© √† "COW-BOY".
    - Pour les mots "ROULETTE" et "CASINO", un indice non pertinent serait "CERCLE 2 (ROULETTE, CASINO)" car "CERCLE" est trop g√©n√©rique.

    G√©n√©rez un indice en suivant ces instructions et ces exemples.
    `;
        const response = yield openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: prompt }],
            max_tokens: 100,
            n: 1,
            stop: null,
            temperature: 0.7,
        });
        if (response.choices && response.choices.length > 0 && response.choices[0].message && response.choices[0].message.content) {
            const clueResponse = response.choices[0].message.content.trim();
            console.log(`\x1b[32mR√©ponse de chat gpt : ${clueResponse}`);
            // Utiliser une expression r√©guli√®re pour extraire l'indice, le nombre de mots et les mots eux-m√™mes
            const match = clueResponse.match(/(.+?) (\d+) \(([^)]+)\)/);
            if (match) {
                const clue = match[1];
                const numberOfWords = parseInt(match[2], 10);
                const words = match[3].split(',').map(word => word.trim());
                console.log("\x1b[34mIndice g√©n√©r√© :", clue);
                console.log("\x1b[34mMots √† faire deviner :", words);
                return { clue, numberOfWords, words };
            }
            else {
                throw new Error("Invalid response format from OpenAI");
            }
        }
        else {
            throw new Error("No valid response from OpenAI");
        }
    });
}
// Fonction pour v√©rifier et g√©n√©rer un indice
function checkAndGenerateClue(page) {
    return __awaiter(this, void 0, void 0, function* () {
        // V√©rifier si l'input pour l'indice est disponible
        const clueInput = page.locator('input[name="clue"]');
        if (yield clueInput.isVisible()) {
            console.log("\x1b[34mL'input pour l'indice est disponible.");
            // üìå R√©cup√©rer les cartes de l'√©quipe rouge, bleue, neutres et noires
            const redCards = yield page.locator('.card.red').allTextContents(); // Cartes de l'√©quipe rouge
            const blueCards = yield page.locator('.card.blue').allTextContents(); // Cartes de l'√©quipe bleue
            const neutralCards = yield page.locator('.card.gray').allTextContents(); // Cartes neutres
            // üìå R√©cup√©rer la carte noire (on prend le premier √©l√©ment de la liste retourn√©e)
            const blackCard = (yield page.locator('.card.black').first().allTextContents()).join("");
            console.log("\x1b[36mCartes du plateau :");
            console.log(`\x1b[36mRouge: ${cleanCards(redCards)}`);
            console.log(`\x1b[36mBleu: ${cleanCards(blueCards)}`);
            console.log(`\x1b[36mNeutre: ${cleanCards(neutralCards)}`);
            console.log(`\x1b[36mNoire: ${blackCard}`);
            console.log("\x1b[37m----------------------------------------------------------------");
            // üìå R√©cup√©rer les cartes d√©j√† trouv√©es/retourn√©es en analysant l'historique des actions
            const foundCards = yield page.evaluate(() => {
                const historyItems = document.querySelectorAll('article.card-red em, article.card-blue em, article.card-gray em, article.card-black em');
                return Array.from(historyItems).map(item => item.textContent.trim());
            });
            console.log(`\x1b[36mCartes d√©j√† trouv√©es: ${cleanCards(foundCards)}`);
            console.log("\x1b[37m----------------------------------------------------------------");
            // Filtrer les cartes trouv√©es des cartes restantes
            const remainingRedCards = cleanCards(redCards).filter(card => !foundCards.includes(card));
            const remainingBlueCards = cleanCards(blueCards).filter(card => !foundCards.includes(card));
            const remainingNeutralCards = cleanCards(neutralCards).filter(card => !foundCards.includes(card));
            console.log("\x1b[36mCartes restantes :");
            console.log(`\x1b[36mRouge: ${remainingRedCards}`);
            console.log(`\x1b[36mBleu: ${remainingBlueCards}`);
            console.log(`\x1b[36mNeutre: ${remainingNeutralCards}`);
            console.log("\x1b[37m----------------------------------------------------------------");
            // G√©n√©rer un indice bas√© sur les cartes de l'√©quipe rouge restantes et √©viter les cartes de l'√©quipe bleue, neutres et noires
            const { clue, numberOfWords } = yield generateClue(remainingRedCards, remainingBlueCards, remainingNeutralCards, blackCard);
            console.log("\x1b[37m----------------------------------------------------------------");
            // üìå Donne l'indice dans l'input
            yield clueInput.fill(clue);
            console.log("\x1b[33mIndice rempli dans l'input.");
            // S√©lectionner le nombre d'indices (par exemple 1)
            const numberSelectButton = page.locator('.numberSelectButton');
            yield numberSelectButton.click();
            // S√©lectionner le nombre de mots √† faire deviner
            const numberOption = page.locator(`.option:has-text("${numberOfWords}")`);
            yield numberOption.click();
            console.log(`\x1b[33mNombre de mots √† faire deviner s√©lectionn√© : ${numberOfWords}`);
            // üìå Cliquer sur le bouton "Donner un indice"
            const giveClueButton = page.locator('text=Donner un indice').first();
            yield giveClueButton.click();
            console.log("\x1b[32mIndice donn√©.");
            console.log("\x1b[37m----------------------------------------------------------------");
        }
        else {
            console.error("\x1b[37mWaiting...");
        }
    });
}
(() => __awaiter(void 0, void 0, void 0, function* () {
    console.log("\x1b[33mLancement du bot Codenames...");
    console.log("\x1b[37m----------------------------------------------------------------");
    // Lance le navigateur en mode non-headless (visible)
    const browser = yield playwright_1.chromium.launch({
        executablePath: "C:\\Users\\dpichot\\Documents\\Perso\\Projects\\codenames_playwright\\node_modules\\playwright-core\\.local-browsers\\chromium-1155\\chrome-win\\chrome.exe",
        headless: false,
    });
    console.log("\x1b[34mNavigateur lanc√©.");
    // Ouvre une nouvelle page
    const page = yield browser.newPage();
    console.log("\x1b[34mPage ouverte.");
    // Va √† la page de la partie
    yield page.goto("https://codenames.game/room/" + room);
    console.log("\x1b[32mPage de la partie charg√©e.");
    console.log("\x1b[37m----------------------------------------------------------------");
    // üìå Saisir le pseudo (avec l'ID "nickname-input")
    const pseudoInput = page.locator('#nickname-input');
    yield pseudoInput.fill("Marie BOT");
    console.log("\x1b[33mPseudo saisi : Marie BOT");
    // üìå Cliquer sur "Rejoindre"
    const joinButton = page.locator('text=Rejoindre').first();
    if (yield joinButton.isVisible()) {
        yield joinButton.click();
        console.log("\x1b[32mPartie rejointe !");
    }
    else {
        console.error("Impossible de trouver le bouton 'Rejoindre'.");
        return;
    }
    console.log("\x1b[37m----------------------------------------------------------------");
    // ‚è≥ Attendre un peu pour que la page se mette √† jour
    yield page.waitForTimeout(5000);
    // üìå Cliquer sur "Rejoindre en tant qu'espion"
    const spyButton = page.locator('text=Rejoindre en tant qu\'espion').first();
    if (yield spyButton.isVisible()) {
        yield spyButton.click();
        console.log("\x1b[33mBot a rejoint en tant qu'espion.");
    }
    else {
        console.error("\x1b[35mImpossible de rejoindre en tant qu'espion ou d√©j√† rejoint.");
    }
    // Attends un peu que le jeu se charge
    yield page.waitForTimeout(5000);
    // Boucle pour v√©rifier r√©guli√®rement si l'input pour l'indice est disponible
    while (true) {
        yield checkAndGenerateClue(page);
        yield page.waitForTimeout(15000); // Attendre 15 secondes avant de v√©rifier √† nouveau
    }
}))();
